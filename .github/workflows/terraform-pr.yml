name: Terraform Pull Request
on:
  workflow_run:
    workflows:
      - Terraform Plan
    types:
      - completed
permissions:
  id-token: write
  contents: read    # This is required for actions/checkout
defaults:
  run:
    working-directory: terraform
env:
  AWS_REGION : "us-east-1"
jobs:
  terraform-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #          role-to-assume: arn:aws:iam::493234449900:role/github-terraform-role
          #          role-session-name: githubterraformsession
          aws-region: ${{ env.AWS_REGION }}
      # Installs a specific version of Terraform
      # https://github.com/marketplace/actions/hashicorp-setup-terraform
      # Todo cache Terraform actions/cache@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.15.0
      - name: Show Terraform version
        run: terraform --version
      - name: Terraform init
        run: terraform init
      - name: Terraform plan
        id: tfplan
        run: terraform plan
      - name: Put Terraform plan in pull request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          TFPLAN: "terraform\n${{ steps.tfplan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.tfplan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.TFPLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: End Terraform cookbook
        run: echo "Ends Terraform cookbook ${{ job.status }}"
